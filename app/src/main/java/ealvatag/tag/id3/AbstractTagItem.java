/*
 * @author : Paul Taylor
 * @author : Eric Farng
 * <p>
 * Version @version:$Id$
 * <p>
 * MusicTag Copyright (C)2003,2004
 * <p>
 * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public  License as
 * published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * <p>
 * You should have received a copy of the GNU Lesser General Public License along with this library; if not, you can get a copy from
 * http://www.opensource.org/licenses/lgpl-license.php or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 * <p>
 * Description: This class is a facade for all classes that can write to an MP3 file. This includes fragments and fragment body . It has
 * abstract methods that needs to be implemented, and a few default implementations of other methods.
 */

package ealvatag.tag.id3;

import ealvatag.tag.TagException;

import java.nio.ByteBuffer;

/**
 * This specifies a series of methods that have to be implemented by all structural subclasses,
 * required to support all copy constructors,iterative methods and so on.
 * <p>
 * This should be an interface but need to figure out exactly that that isSubsetOf method is supposed to do. Most don't override.
 */
public abstract class AbstractTagItem {

    /**
     * ID string that usually corresponds to the class name, but can be
     * displayed to the user. It is not indended to identify each individual
     * instance.
     *
     * @return ID string
     */
    public String getIdentifier() {
        return getClass().getName();
    }

    /**
     * Return size of this item
     *
     * @return size of this item
     */
    public abstract int getSize();

    /**
     * @param byteBuffer file to read from
     *
     * @throws TagException on any exception generated by this library.
     */
    public abstract void read(ByteBuffer byteBuffer) throws TagException;

    /**
     * Returns true if this datatype is a subset of the argument. This instance
     * is a subset if it is the same class as the argument.
     *
     * @param obj datatype to determine subset of
     *
     * @return true if this instance and its entire datatype array list is a subset of the argument.
     */
    protected boolean isSubsetOf(Object obj) {
        return obj instanceof AbstractTagItem;
    }
}
